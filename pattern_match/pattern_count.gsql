USE GRAPH social
DROP QUERY pattern_count
DROP QUERY pattern_count_sub

# sub query: return the number of matched patterns for the source vertex 
CREATE QUERY pattern_count_sub(VERTEX source) FOR GRAPH social returns (INT){ 
        OrAccum @is_1hop;
        BagAccum<Vertex> @@d;
        A = {source};
        
        Hop1 = SELECT b
               FROM A:a -(Friend:e) -> Person:b
               ACCUM b.@is_1hop = true; // flag for 1-hop neighbors
        Hop2 = SELECT c
               FROM Hop1:b -(Friend:e) -> Person:c
               // check if b and c both have @is_1hop=true -> valid b,c pair
               WHERE c.@is_1hop == true  // Count how many neighbors b&c have in common -> d's
               ACCUM @@d += b.neighbors("Friend") INTERSECT c.neighbors("Friend");   
                     //.neighbors([ STRING edgeType ]) returns a BagAccum, which allows duplicate elements
                
        RETURN @@d.size();
}

# main query: print the number of matched patterns for each vertex in the graph
CREATE QUERY pattern_count() FOR GRAPH social { 
        MapAccum<Vertex, INT> @@pattern_count;
        Start = {Person.*};
        Start = SELECT s
                FROM Start:s
                ACCUM @@pattern_count += (s -> pattern_count_sub(s));
        PRINT @@pattern_count;
}

INSTALL QUERY pattern_count_sub
INSTALL QUERY pattern_count

